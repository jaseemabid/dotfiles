#!/usr/bin/env python3

import subprocess
import sys
import os


def main():
    # Ensure we are in a Git repository
    try:
        run("git rev-parse --is-inside-work-tree")
    except subprocess.CalledProcessError:
        sys.exit("Not inside a Git repository. Exiting.")

    # Get the list of changed files
    changed_files = run("git diff --name-only")
    staged_files = run("git diff --staged --name-only")

    files = staged_files if staged_files else changed_files

    # Find default branch - master/main or something else
    remote = run("git rev-parse --abbrev-ref origin/HEAD")[0]

    # If no files are changed, perform non-interactive rebase
    if not files:
        run(f"GIT_SEQUENCE_EDITOR=true git rebase -i {remote}")
        exit(0)

    # Get the last commit hash for each changed file
    commits = {run(f"git log -n 1 --pretty=format:'%H' -- {f}")[0] for f in files}

    # If the commit hashes set has more than 1 unique value, bail out
    if len(commits) != 1:
        sys.exit("Changed files were modified in different commits. Exiting")

    # The only element in commit_hashes set is the last commit hash
    last_commit_hash = commits.pop()

    # Invoke git commit --fixup using the last commit hash
    try:
        if staged_files:
            run(f"git commit --fixup {last_commit_hash}")
        else:
            run(f"git commit -a --fixup {last_commit_hash}")

    except subprocess.CalledProcessError as e:
        sys.exit(f"Error executing git commit --fixup. Error: {str(e)}")


def run(command):
    if os.environ.get("VERBOSE", False):
        print("RUN", command)
    lines = subprocess.check_output(command, shell=True).decode().strip().split("\n")
    return [line for line in lines if line.strip() != ""]


if __name__ == "__main__":
    main()
